package library.dao.repos.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import library.dao.mappers.IMapper;
import library.dao.repos.IUserRepository;
import library.dao.uow.IUnitOfWork;
import library.domain.User;

public class UserRepository extends RepositoryBase<User> implements IUserRepository{

	String selectByLoginSql = "SELECT * FROM user WHERE login=?";
	String selectByEmailSql = "SELECT * FROM user WHERE email=?";
	PreparedStatement selectByLogin;
	PreparedStatement selectByEmail;
	
	public UserRepository(Connection connection, IMapper<User> mapper, IUnitOfWork uow) throws SQLException{
		super(connection, mapper, uow);
		selectByLogin = connection.prepareStatement(selectByLoginSql);
		selectByEmail = connection.prepareStatement(selectByEmailSql);
	}
	
	@Override
	protected String getUpdateQuerySql() {
		return ""
				+ "UPDATE user SET (login,password, email) = (?,?,?) WHERE id=?"
				+ "";
	}
	
	@Override
	protected String getInsertQuerySql() {
		return ""
				+ "INSERT INTO user(login,password,email) VALUES (?,?,?)"
				+ "";
	}
	
	@Override
	protected String getTableName() {
		return "user";
	}
	
	@Override
	protected String createTableStatementSql() {
		return "CREATE TABLE user("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "login varchar(20),"
				+ "password varchar(20),"
				+ "email varchar(50)"
				+ ")";
	}
	
	@Override
	protected void setUpdate(User user) throws SQLException {
		update.setString(1, user.getLogin());
		update.setString(2, user.getPassword());
		update.setString(3, user.getEmail());
		update.setInt(4, user.getId());
	}
	
	@Override
	protected void setInsert(User user) throws SQLException {
		insert.setString(1, user.getLogin());
		insert.setString(2, user.getPassword());
		insert.setString(3, user.getEmail());
	}

	@Override
	public List<User> withLogin(String login) {
		List<User> result = new ArrayList<User>();
		try {
			selectByLogin.setString(1,login);
			ResultSet rs = selectByLogin.executeQuery();
			while(rs.next()) result.add(mapper.map(rs));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}

	@Override
	public List<User> withEmail(String email) {
		List<User> result = new ArrayList<User>();
		try {
			selectByEmail.setString(1, email);
			ResultSet rs = selectByEmail.executeQuery();
			while(rs.next()) result.add(mapper.map(rs));
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}	
	
	
}
