package library.dao.repos;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import library.domain.Person;
import library.domain.User;

public class UserRepository extends RepositoryBase{


	public UserRepository(Connection connection){
		super(connection);
	}
		
	public void add(User user){
		
		try {
			insert.setString(1,user.getLogin());
			insert.setString(2, user.getPassword());
			insert.setString(3, user.getEmail());
			insert.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} 
		
		 
			
		}
	
	public int count(){
		try {
			ResultSet rs = count.executeQuery();
			while(rs.next()){
				return rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return 0;
	}
	
	public int selectById(){try {
		ResultSet rs = lastId.executeQuery();
		while(rs.next()){
			return rs.getInt(1);
		}
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return 0;
	}
		
	public int lastId(){try {
		ResultSet rs = lastId.executeQuery();
		while(rs.next()){
			return rs.getInt(1);
		}
	} catch (SQLException e) {
		e.printStackTrace();
	}
	return 0;
	}
	
	public List<User> getPage(int offset, int limit){
		List<User> result = new ArrayList<User>();
		try {
			selectPage.setInt(1, offset);
			selectPage.setInt(1, limit);
			ResultSet rs = selectPage.executeQuery();
			while(rs.next()){
				User u = new User();
				u.setId(rs.getInt("id"));
				u.setLogin(rs.getString("login"));
				u.setPassword(rs.getString("password"));
				u.setEmail(rs.getString("email"));
				result.add(u);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public void update(User user){
		
		try {
			update.setInt(1, user.getId());
			update.setString(2, user.getLogin());
			update.setString(3, user.getPassword());
			update.setString(4, user.getEmail());
	
			update.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public void delete(User user){
		
		try {
			delete.setInt(1, user.getId());
			delete.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	
	
	public void createTable(){
		
		String sql = "CREATE TABLE user("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY,"
				+ "login varchar(20),"
				+ "password varchar(20),"
				+ "email varchar(50)"
				+ ")";
		
		try {
			Statement createTable = connection.createStatement();
			createTable.executeUpdate(sql);
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	protected String getUpdateQuerySql() {
		return ""
				+ "UPDATE user SET (id,email,login,password) = (?,?,?,?) WHERE id=?"
				+ "";
	}
	protected String getInsertQuerySql() {
		return ""
				+ "INSERT INTO user(id,email,login,password) VALUES (?,?,?,?)"
				+ "";
	}
	@Override
	protected String getTableName() {
		return "user";
	
	
	}
}
